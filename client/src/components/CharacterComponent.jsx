/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 .\public\models\Character Animated.glb -o src\components\CharacterAnimated.jsx -r public 
*/

import React, { useRef, useState, useEffect, useMemo } from 'react'
import { useFrame, useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { userAtom } from "./SocketManager";
import { useAtom } from 'jotai';

const WALK_SPEED = 0.015;

export function CharacterComponent({
  shirtColor = "green",
  id,
  ...props
}) {
  const group = useRef();
  const { scene, animations } = useGLTF('/models/Character Animated.glb');
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions } = useAnimations(animations, group);
  const [animation, setAnimation] = useState("CharacterArmature|Idle");
  const position = useMemo(() => props.position, []);
  const cameraPosition = useMemo(() => props.cameraPosition, []);
  //console.info("actions:", actions);

  useEffect(() => {
    actions[animation].reset().fadeIn(0.3).play();

    return () => actions[animation]?.fadeOut(0.3);
  }, [animation]);

  const [user] = useAtom(userAtom);

  useFrame((state) => {
    if (group.current.position.distanceTo(props.position) > 0.1) {
      const direction = group.current.position
        .clone()
        .sub(props.position)
        .normalize()
        .multiplyScalar(WALK_SPEED);
      group.current.position.sub(direction);
      group.current.lookAt(props.position);
      setAnimation("CharacterArmature|Walk");
    } else {
      setAnimation("CharacterArmature|Idle");
    }
    //console.log(`Character useFrame id === user: ${id} ${user}`);
    if(id === user) {
      state.camera.position.x = group.current.position.x + cameraPosition[0];
      state.camera.position.y = group.current.position.y + cameraPosition[1];
      state.camera.position.z = group.current.position.z + cameraPosition[2];
      state.camera.lookAt(group.current.position);
    }
  });

  return (
    <group ref={group} {...props} position={position} dispose={null}>
      <group name="Root_Scene">
        <group name="RootNode">
          <group name="CharacterArmature" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <primitive object={nodes.Root} />
          </group>
          <group name="Rogue" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <skinnedMesh name="Rogue_1" geometry={nodes.Rogue_1.geometry} material={materials.Skin} skeleton={nodes.Rogue_1.skeleton} />
            <skinnedMesh name="Rogue_2" geometry={nodes.Rogue_2.geometry} material={materials.UnderShirt} skeleton={nodes.Rogue_2.skeleton} />
            <skinnedMesh name="Rogue_3" geometry={nodes.Rogue_3.geometry} material={materials.Pants} skeleton={nodes.Rogue_3.skeleton} />
            <skinnedMesh name="Rogue_4" geometry={nodes.Rogue_4.geometry} material={materials.Shirt} skeleton={nodes.Rogue_4.skeleton} >
              <meshStandardMaterial color={shirtColor} />
            </skinnedMesh>
            <skinnedMesh name="Rogue_5" geometry={nodes.Rogue_5.geometry} material={materials.Detail} skeleton={nodes.Rogue_5.skeleton} />
            <skinnedMesh name="Rogue_6" geometry={nodes.Rogue_6.geometry} material={materials.Boots} skeleton={nodes.Rogue_6.skeleton} />
          </group>
          <skinnedMesh name="Rogue001" geometry={nodes.Rogue001.geometry} material={materials['Material.006']} skeleton={nodes.Rogue001.skeleton} position={[0, 0, 0.166]} rotation={[-Math.PI / 2, 0, 0]} scale={100} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/Character Animated.glb')
